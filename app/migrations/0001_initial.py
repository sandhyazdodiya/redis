# Generated by Django 5.2.3 on 2025-08-25 07:12

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ActivityLogs',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('user_id', models.IntegerField(blank=True, null=True)),
                ('action_state', models.CharField(blank=True, max_length=255, null=True)),
                ('entity_name', models.CharField(blank=True, max_length=255, null=True)),
                ('entity_id', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'activity_logs',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('comapny_name', models.CharField(blank=True, max_length=255, null=True)),
                ('company_description', models.CharField(blank=True, max_length=255, null=True)),
                ('website', models.CharField(blank=True, max_length=1000, null=True)),
                ('industry', models.CharField(blank=True, max_length=255, null=True)),
                ('size', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'company',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('phone_number', models.CharField(blank=True, max_length=255, null=True)),
                ('user_role', models.CharField(blank=True, max_length=9, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'user',
                'managed': True,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Candidate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dob', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, max_length=255, null=True)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('resume_url', models.CharField(blank=True, max_length=1000, null=True)),
                ('experience', models.IntegerField(blank=True, null=True)),
                ('skills', models.JSONField(blank=True, null=True)),
                ('education', models.CharField(blank=True, max_length=255, null=True)),
                ('candidate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'candidate',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CandidateEducation',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('degree', models.CharField(blank=True, max_length=255, null=True)),
                ('university', models.CharField(blank=True, max_length=255, null=True)),
                ('start_year', models.TextField(blank=True, null=True)),
                ('end_year', models.TextField(blank=True, null=True)),
                ('candidate', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.candidate')),
            ],
            options={
                'db_table': 'candidate_education',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('job_description', models.CharField(blank=True, max_length=1000, null=True)),
                ('job_type', models.CharField(blank=True, max_length=10, null=True)),
                ('location', models.CharField(blank=True, max_length=255, null=True)),
                ('salary_min', models.IntegerField(blank=True, null=True)),
                ('salary_max', models.IntegerField(blank=True, null=True)),
                ('skills_required', models.JSONField(blank=True, null=True)),
                ('job_status', models.CharField(blank=True, max_length=6, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.company')),
                ('recruiter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'job',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='JobApplication',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('application_status', models.CharField(blank=True, max_length=9, null=True)),
                ('applied_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('candidate', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.candidate')),
                ('job', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.job')),
            ],
            options={
                'db_table': 'job_application',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ApplicationFeedback',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('round_name', models.CharField(blank=True, max_length=17, null=True)),
                ('feedback', models.JSONField(blank=True, null=True)),
                ('rating', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('reviewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('application', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.jobapplication')),
            ],
            options={
                'db_table': 'application_feedback',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Offer',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('offered_salary', models.IntegerField(blank=True, null=True)),
                ('joining_date', models.CharField(blank=True, max_length=255, null=True)),
                ('application_status', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('application', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.jobapplication')),
            ],
            options={
                'db_table': 'offer',
                'managed': True,
            },
        ),
    ]
